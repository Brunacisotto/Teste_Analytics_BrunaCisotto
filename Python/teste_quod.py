# -*- coding: utf-8 -*-
"""Cópia de testeQuod.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uoo025UXDZB1SgWQ-6ZrIvb3uW3i2KRD
"""

import pandas as pd
import numpy as np

# numero de registros (escolhi fazer com 1000 para gerar uma massa de dados significativa)
numreg = 1000

# criar ids a partir de 1 e somar sempre +1
id = range(1, numreg+1)

# gerando datas aleatorias entre 01/01/2023 e 31/12/2023
data = pd.to_datetime(
    np.random.choice(pd.date_range("2023-01-01", "2023-12-31"), numreg)
)

# gerar produto e categoria
produto = ["Relogio Inteligente", "Monitor Cardiaco", "Camiseta", "Calca", "Tenis",
            "Bicicleta", "Mini Trampolim", "Barrinha de Cereal", "Livro de Receitas Fitnes", "Mochila", "Luvas","Barraca de Camping","Cantil","Meias", "Multi-vitaminico", "Creatina"]

categoria = {
    "Relogio Inteligente": "Eletronicos",
    "Monitor Cardiaco": "Eletronicos",
    "Camiseta": "Vestuario",
    "Calca": "Vestuario",
    "Tenis": "Vestuario",
    "Bicicleta": "Equipamento Esportivo",
    "Mini Trampolim": "Equipamento Esportivo",
    "Barrinha de Cereal": "Alimentos",
    "Livro de Receitas Fitnes": "Educacao",
    "Mochila": "Acessorios",
    "Luvas": "Acessorios",
    "Barraca de Camping": "Lazer",
    "Cantil": "Acessorios",
    "Meias": "Vestuario",
    "Multi-vitaminico": "Suplemento",
    "Creatina": "Suplemento"

}

preco = {
    "Relogio Inteligente": 899.90,
    "Monitor Cardiaco": 353.00,
    "Camiseta": 79.90,
    "Calca": 246.00,
    "Tenis": 299.99,
    "Bicicleta": 2450.00,
    "Mini Trampolim": 350.00,
    "Barrinha de Cereal": 4.50,
    "Livro de Receitas Fitnes": 65.00,
    "Mochila": 120.00,
    "Luvas": 97.00,
    "Barraca de Camping": 680.00,
    "Cantil": 35.00,
    "Meias": 19.90,
    "Multi-vitaminico": 89.90,
    "Creatina": 139.90
}

# produtos aleatorios
prodaleatorio = np.random.choice(produto, numreg)

# categoria/produto
cat = [categoria[p] for p in prodaleatorio]

# quantidade entre 1 e 50
quant = np.random.randint(1, 51, numreg)

# preço/produto
precos = [preco[p] for p in prodaleatorio]

# gerar base de dados
basebruta = pd.DataFrame({
    "ID": id,
    "Data": data,
    "Produto": prodaleatorio,
    "Categoria": cat,
    "Quantidade": quant,
    "Preco": precos
})

basebruta.head(20)

basebruta.to_csv("data1.csv", index=False)

#gerar alguns valores nulos em preço e produto (aleatorios)
basebruta.loc[np.random.choice(basebruta.index, 5, replace=False), "Preco"] = np.nan
basebruta.loc[np.random.choice(basebruta.index, 3, replace=False), "Produto"] = np.nan

#gerar 10 linhas duplicadas (aleatorias)
basebruta = pd.concat([basebruta, basebruta.sample(10)], ignore_index=True)

#salvar dataset
basebruta.to_csv("dataasertratado.csv", index=False)

#consultar linhas duplicadas
duplicadas = basebruta[basebruta.duplicated()]
print(duplicadas)

#apagando duplicadas
basebruta.drop_duplicates(inplace=True)

#verificando se foram apagadas
duplicadas = basebruta[basebruta.duplicated()]
print(duplicadas)

#achando linhas com valores nulos
linhasnulos = basebruta[basebruta.isna().any(axis=1)]
print(linhasnulos)

# tratando nulos
basebruta.dropna(inplace=True)

#verificando se foram apagados
linhasnulos = basebruta[basebruta.isna().any(axis=1)]
print(linhasnulos)

#veririfcando a quantidade de linhas restantes após tratramentos
print(len(basebruta))

#conferindo tipos do dados
basebruta.info()

#salvar dataset limpo
basebruta.to_csv("data_clean.csv", index=False)

#abrir dataset limpo
baselimpa = pd.read_csv('data_clean.csv')

baselimpa.head(20)

# criando coluna total de vendas
baselimpa['Total de Vendas'] = baselimpa['Quantidade'] * baselimpa['Preco']

baselimpa.head(20)

#salvando base com a coluna total de vendas
baselimpa.to_csv("data_clean_comtotaldevendas.csv", index=False)

#agrupando os produtos e somando o valor total de vendas de cada um
vendastotais = baselimpa.groupby('Produto')['Total de Vendas'].sum().reset_index()
print(vendastotais)

#ordenando total de vendas em ordem descrescente
vendastotais_ordenado = vendastotais.sort_values(by='Total de Vendas',ascending=False)
print("Produtos com maior Valor Total de Venda em ordem Descrescente")
print(vendastotais_ordenado)

# selecionar a primeira linha, que é o produto com maior valor total de vandas
vendastotais_ordenado = vendastotais.sort_values(by='Total de Vendas', ascending=False)
maiorvenda = vendastotais_ordenado.iloc[0]

print("Produto com a Maior Quantidade de Vendas:")
print(maiorvenda)

#agrupando os produtos e somando a quantidade total de unidades vendidas
unidadestotais = baselimpa.groupby('Produto')['Quantidade'].sum().reset_index()

#ordenando total de unidades vendidas em ordem descrescente
unidadestotais_ordenado = unidadestotais.sort_values(by='Quantidade',ascending=False)
print("Produtos com maior quantidades unitaria de vendas em ordem Descrescente")
print(unidadestotais_ordenado)

# selecionar a primeira linha, que é o produto com maior quantidade unitaria de vendas
unidadestotais_ordenado = unidadestotais.sort_values(by='Quantidade', ascending=False)
maiorquantidade = unidadestotais_ordenado.iloc[0]

print("Produto com a Maior Quantidade de Unidades Vendidas:")
print(maiorquantidade)